/*
 * This file is generated by jOOQ.
 */
package tech.lacambra.kmanager.generated.jooq.tables.records;


import jakarta.validation.constraints.NotNull;

import java.time.LocalDateTime;
import java.util.UUID;

import org.jooq.impl.TableRecordImpl;

import tech.lacambra.kmanager.generated.jooq.tables.Document;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class DocumentRecord extends TableRecordImpl<DocumentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.document.id</code>.
     */
    public void setId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.document.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.document.title</code>.
     */
    public void setTitle(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.document.title</code>.
     */
    @NotNull
    public String getTitle() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.document.file_name</code>.
     */
    public void setFileName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.document.file_name</code>.
     */
    @NotNull
    public String getFileName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.document.uri</code>.
     */
    public void setUri(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.document.uri</code>.
     */
    public String getUri() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.document.content</code>.
     */
    public void setContent(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.document.content</code>.
     */
    @NotNull
    public String getContent() {
        return (String) get(4);
    }

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public void setEmbedding(Object value) {
        set(5, value);
    }

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public Object getEmbedding() {
        return get(5);
    }

    /**
     * Setter for <code>public.document.created_at</code>.
     */
    public void setCreatedAt(LocalDateTime value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.document.created_at</code>.
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(6);
    }

    /**
     * Setter for <code>public.document.updated_at</code>.
     */
    public void setUpdatedAt(LocalDateTime value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.document.updated_at</code>.
     */
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(7);
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DocumentRecord
     */
    public DocumentRecord() {
        super(Document.DOCUMENT);
    }

    /**
     * Create a detached, initialised DocumentRecord
     */
    public DocumentRecord(UUID id, String title, String fileName, String uri, String content, Object embedding, LocalDateTime createdAt, LocalDateTime updatedAt) {
        super(Document.DOCUMENT);

        setId(id);
        setTitle(title);
        setFileName(fileName);
        setUri(uri);
        setContent(content);
        setEmbedding(embedding);
        setCreatedAt(createdAt);
        setUpdatedAt(updatedAt);
        resetTouchedOnNotNull();
    }

    /**
     * Create a detached, initialised DocumentRecord
     */
    public DocumentRecord(tech.lacambra.kmanager.generated.jooq.tables.pojos.Document value) {
        super(Document.DOCUMENT);

        if (value != null) {
            setId(value.getId());
            setTitle(value.getTitle());
            setFileName(value.getFileName());
            setUri(value.getUri());
            setContent(value.getContent());
            setEmbedding(value.getEmbedding());
            setCreatedAt(value.getCreatedAt());
            setUpdatedAt(value.getUpdatedAt());
            resetTouchedOnNotNull();
        }
    }
}
