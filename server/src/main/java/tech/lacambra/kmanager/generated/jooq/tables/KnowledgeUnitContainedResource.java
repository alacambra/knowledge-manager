/*
 * This file is generated by jOOQ.
 */
package tech.lacambra.kmanager.generated.jooq.tables;


import java.time.LocalDateTime;
import java.util.Collection;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import tech.lacambra.kmanager.generated.jooq.Public;
import tech.lacambra.kmanager.generated.jooq.tables.records.KnowledgeUnitContainedResourceRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class KnowledgeUnitContainedResource extends TableImpl<KnowledgeUnitContainedResourceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>public.knowledge_unit_contained_resource</code>
     */
    public static final KnowledgeUnitContainedResource KNOWLEDGE_UNIT_CONTAINED_RESOURCE = new KnowledgeUnitContainedResource();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<KnowledgeUnitContainedResourceRecord> getRecordType() {
        return KnowledgeUnitContainedResourceRecord.class;
    }

    /**
     * The column <code>public.knowledge_unit_contained_resource.id</code>.
     */
    public final TableField<KnowledgeUnitContainedResourceRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("uuid_generate_v4()"), SQLDataType.UUID)), this, "");

    /**
     * The column
     * <code>public.knowledge_unit_contained_resource.knowledge_unit_id</code>.
     */
    public final TableField<KnowledgeUnitContainedResourceRecord, UUID> KNOWLEDGE_UNIT_ID = createField(DSL.name("knowledge_unit_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column
     * <code>public.knowledge_unit_contained_resource.knowledge_unit_resource_id</code>.
     */
    public final TableField<KnowledgeUnitContainedResourceRecord, UUID> KNOWLEDGE_UNIT_RESOURCE_ID = createField(DSL.name("knowledge_unit_resource_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column
     * <code>public.knowledge_unit_contained_resource.is_default</code>.
     */
    public final TableField<KnowledgeUnitContainedResourceRecord, Boolean> IS_DEFAULT = createField(DSL.name("is_default"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    /**
     * The column
     * <code>public.knowledge_unit_contained_resource.created_at</code>.
     */
    public final TableField<KnowledgeUnitContainedResourceRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private KnowledgeUnitContainedResource(Name alias, Table<KnowledgeUnitContainedResourceRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private KnowledgeUnitContainedResource(Name alias, Table<KnowledgeUnitContainedResourceRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.knowledge_unit_contained_resource</code>
     * table reference
     */
    public KnowledgeUnitContainedResource(String alias) {
        this(DSL.name(alias), KNOWLEDGE_UNIT_CONTAINED_RESOURCE);
    }

    /**
     * Create an aliased <code>public.knowledge_unit_contained_resource</code>
     * table reference
     */
    public KnowledgeUnitContainedResource(Name alias) {
        this(alias, KNOWLEDGE_UNIT_CONTAINED_RESOURCE);
    }

    /**
     * Create a <code>public.knowledge_unit_contained_resource</code> table
     * reference
     */
    public KnowledgeUnitContainedResource() {
        this(DSL.name("knowledge_unit_contained_resource"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public KnowledgeUnitContainedResource as(String alias) {
        return new KnowledgeUnitContainedResource(DSL.name(alias), this);
    }

    @Override
    public KnowledgeUnitContainedResource as(Name alias) {
        return new KnowledgeUnitContainedResource(alias, this);
    }

    @Override
    public KnowledgeUnitContainedResource as(Table<?> alias) {
        return new KnowledgeUnitContainedResource(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public KnowledgeUnitContainedResource rename(String name) {
        return new KnowledgeUnitContainedResource(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public KnowledgeUnitContainedResource rename(Name name) {
        return new KnowledgeUnitContainedResource(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public KnowledgeUnitContainedResource rename(Table<?> name) {
        return new KnowledgeUnitContainedResource(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public KnowledgeUnitContainedResource where(Condition condition) {
        return new KnowledgeUnitContainedResource(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public KnowledgeUnitContainedResource where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public KnowledgeUnitContainedResource where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public KnowledgeUnitContainedResource where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public KnowledgeUnitContainedResource where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public KnowledgeUnitContainedResource where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public KnowledgeUnitContainedResource where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public KnowledgeUnitContainedResource where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public KnowledgeUnitContainedResource whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public KnowledgeUnitContainedResource whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
