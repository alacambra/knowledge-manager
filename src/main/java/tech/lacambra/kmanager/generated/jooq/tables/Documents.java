/*
 * This file is generated by jOOQ.
 */
package tech.lacambra.kmanager.generated.jooq.tables;


import java.time.OffsetDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.DefaultDataType;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import tech.lacambra.kmanager.generated.jooq.Public;
import tech.lacambra.kmanager.generated.jooq.tables.records.DocumentsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Documents extends TableImpl<DocumentsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.documents</code>
     */
    public static final Documents DOCUMENTS = new Documents();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DocumentsRecord> getRecordType() {
        return DocumentsRecord.class;
    }

    /**
     * The column <code>public.documents.id</code>.
     */
    public final TableField<DocumentsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.documents.title</code>.
     */
    public final TableField<DocumentsRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.documents.content</code>.
     */
    public final TableField<DocumentsRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public final TableField<DocumentsRecord, Object> EMBEDDING = createField(DSL.name("embedding"), DefaultDataType.getDefaultDataType("\"public\".\"vector\""), this, "");

    /**
     * The column <code>public.documents.metadata</code>.
     */
    public final TableField<DocumentsRecord, JSONB> METADATA = createField(DSL.name("metadata"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>public.documents.created_at</code>.
     */
    public final TableField<DocumentsRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>public.documents.updated_at</code>.
     */
    public final TableField<DocumentsRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private Documents(Name alias, Table<DocumentsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Documents(Name alias, Table<DocumentsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.documents</code> table reference
     */
    public Documents(String alias) {
        this(DSL.name(alias), DOCUMENTS);
    }

    /**
     * Create an aliased <code>public.documents</code> table reference
     */
    public Documents(Name alias) {
        this(alias, DOCUMENTS);
    }

    /**
     * Create a <code>public.documents</code> table reference
     */
    public Documents() {
        this(DSL.name("documents"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<DocumentsRecord, Long> getIdentity() {
        return (Identity<DocumentsRecord, Long>) super.getIdentity();
    }

    @Override
    public Documents as(String alias) {
        return new Documents(DSL.name(alias), this);
    }

    @Override
    public Documents as(Name alias) {
        return new Documents(alias, this);
    }

    @Override
    public Documents as(Table<?> alias) {
        return new Documents(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Documents rename(String name) {
        return new Documents(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Documents rename(Name name) {
        return new Documents(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Documents rename(Table<?> name) {
        return new Documents(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Documents where(Condition condition) {
        return new Documents(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Documents where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Documents where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Documents where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Documents where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Documents where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Documents where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Documents where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Documents whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Documents whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
