/* tslint:disable */
/* eslint-disable */
/**
 * Knowledge Manager API
 * The Knowledge Manager API provides endpoints for managing knowledge units. A knowledge unit aggregates multi-dimensional information needed for specific tasks, enabling cross-domain information reuse and contextual knowledge assembly.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateDocumentRequest,
} from '../models/index';
import {
    CreateDocumentRequestFromJSON,
    CreateDocumentRequestToJSON,
} from '../models/index';

export interface HelloaiCreateWithTextPostRequest {
    createDocumentRequest: CreateDocumentRequest;
}

export interface HelloaiDocumentsIdGetRequest {
    id: string;
}

export interface HelloaiSearchGetRequest {
    q?: string;
}

export interface HelloaiTestEmbeddingPostRequest {
    createDocumentRequest: CreateDocumentRequest;
}

/**
 * 
 */
export class HelloAIResourceApi extends runtime.BaseAPI {

    /**
     * Create Random Document
     */
    async helloaiCreateRandomPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/helloai/create-random`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create Random Document
     */
    async helloaiCreateRandomPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.helloaiCreateRandomPostRaw(initOverrides);
    }

    /**
     * Create Document With Text
     */
    async helloaiCreateWithTextPostRaw(requestParameters: HelloaiCreateWithTextPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createDocumentRequest'] == null) {
            throw new runtime.RequiredError(
                'createDocumentRequest',
                'Required parameter "createDocumentRequest" was null or undefined when calling helloaiCreateWithTextPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/helloai/create-with-text`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDocumentRequestToJSON(requestParameters['createDocumentRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create Document With Text
     */
    async helloaiCreateWithTextPost(requestParameters: HelloaiCreateWithTextPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.helloaiCreateWithTextPostRaw(requestParameters, initOverrides);
    }

    /**
     * Get All Documents
     */
    async helloaiDocumentsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/helloai/documents`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get All Documents
     */
    async helloaiDocumentsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.helloaiDocumentsGetRaw(initOverrides);
    }

    /**
     * Get Document
     */
    async helloaiDocumentsIdGetRaw(requestParameters: HelloaiDocumentsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling helloaiDocumentsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/helloai/documents/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get Document
     */
    async helloaiDocumentsIdGet(requestParameters: HelloaiDocumentsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.helloaiDocumentsIdGetRaw(requestParameters, initOverrides);
    }

    /**
     * Hello
     */
    async helloaiGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/helloai`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Hello
     */
    async helloaiGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.helloaiGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Search Documents
     */
    async helloaiSearchGetRaw(requestParameters: HelloaiSearchGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/helloai/search`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Search Documents
     */
    async helloaiSearchGet(requestParameters: HelloaiSearchGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.helloaiSearchGetRaw(requestParameters, initOverrides);
    }

    /**
     * Test Embedding
     */
    async helloaiTestEmbeddingPostRaw(requestParameters: HelloaiTestEmbeddingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createDocumentRequest'] == null) {
            throw new runtime.RequiredError(
                'createDocumentRequest',
                'Required parameter "createDocumentRequest" was null or undefined when calling helloaiTestEmbeddingPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/helloai/test-embedding`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDocumentRequestToJSON(requestParameters['createDocumentRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Test Embedding
     */
    async helloaiTestEmbeddingPost(requestParameters: HelloaiTestEmbeddingPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.helloaiTestEmbeddingPostRaw(requestParameters, initOverrides);
    }

}
