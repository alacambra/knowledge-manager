/* tslint:disable */
/* eslint-disable */
/**
 * Knowledge Manager API
 * The Knowledge Manager API provides endpoints for managing knowledge units. A knowledge unit aggregates multi-dimensional information needed for specific tasks, enabling cross-domain information reuse and contextual knowledge assembly.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { JSONB } from './JSONB';
import {
    JSONBFromJSON,
    JSONBFromJSONTyped,
    JSONBToJSON,
    JSONBToJSONTyped,
} from './JSONB';

/**
 * 
 * @export
 * @interface Document
 */
export interface Document {
    /**
     * 
     * @type {string}
     * @memberof Document
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Document
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof Document
     */
    content: string;
    /**
     * 
     * @type {any}
     * @memberof Document
     */
    embedding?: any | null;
    /**
     * 
     * @type {JSONB}
     * @memberof Document
     */
    metadata?: JSONB;
    /**
     * 
     * @type {Date}
     * @memberof Document
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Document
     */
    updatedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof Document
     */
    fileName: string;
    /**
     * 
     * @type {string}
     * @memberof Document
     */
    uri?: string;
}

/**
 * Check if a given object implements the Document interface.
 */
export function instanceOfDocument(value: object): value is Document {
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('content' in value) || value['content'] === undefined) return false;
    if (!('fileName' in value) || value['fileName'] === undefined) return false;
    return true;
}

export function DocumentFromJSON(json: any): Document {
    return DocumentFromJSONTyped(json, false);
}

export function DocumentFromJSONTyped(json: any, ignoreDiscriminator: boolean): Document {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'title': json['title'],
        'content': json['content'],
        'embedding': json['embedding'] == null ? undefined : json['embedding'],
        'metadata': json['metadata'] == null ? undefined : JSONBFromJSON(json['metadata']),
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
        'updatedAt': json['updatedAt'] == null ? undefined : (new Date(json['updatedAt'])),
        'fileName': json['fileName'],
        'uri': json['uri'] == null ? undefined : json['uri'],
    };
}

export function DocumentToJSON(json: any): Document {
    return DocumentToJSONTyped(json, false);
}

export function DocumentToJSONTyped(value?: Document | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'title': value['title'],
        'content': value['content'],
        'embedding': value['embedding'],
        'metadata': JSONBToJSON(value['metadata']),
        'createdAt': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'updatedAt': value['updatedAt'] == null ? undefined : ((value['updatedAt']).toISOString()),
        'fileName': value['fileName'],
        'uri': value['uri'],
    };
}

