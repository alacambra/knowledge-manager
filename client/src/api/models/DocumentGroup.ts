/* tslint:disable */
/* eslint-disable */
/**
 * Knowledge Manager API
 * The Knowledge Manager API provides endpoints for managing knowledge units. A knowledge unit aggregates multi-dimensional information needed for specific tasks, enabling cross-domain information reuse and contextual knowledge assembly.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface DocumentGroup
 */
export interface DocumentGroup {
    /**
     * 
     * @type {string}
     * @memberof DocumentGroup
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof DocumentGroup
     */
    uri: string;
    /**
     * 
     * @type {Date}
     * @memberof DocumentGroup
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof DocumentGroup
     */
    updatedAt?: Date;
}

/**
 * Check if a given object implements the DocumentGroup interface.
 */
export function instanceOfDocumentGroup(value: object): value is DocumentGroup {
    if (!('uri' in value) || value['uri'] === undefined) return false;
    return true;
}

export function DocumentGroupFromJSON(json: any): DocumentGroup {
    return DocumentGroupFromJSONTyped(json, false);
}

export function DocumentGroupFromJSONTyped(json: any, ignoreDiscriminator: boolean): DocumentGroup {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'uri': json['uri'],
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
        'updatedAt': json['updatedAt'] == null ? undefined : (new Date(json['updatedAt'])),
    };
}

export function DocumentGroupToJSON(json: any): DocumentGroup {
    return DocumentGroupToJSONTyped(json, false);
}

export function DocumentGroupToJSONTyped(value?: DocumentGroup | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'uri': value['uri'],
        'createdAt': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'updatedAt': value['updatedAt'] == null ? undefined : ((value['updatedAt']).toISOString()),
    };
}

