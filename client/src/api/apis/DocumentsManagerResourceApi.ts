/* tslint:disable */
/* eslint-disable */
/**
 * Knowledge Manager API
 * The Knowledge Manager API provides endpoints for managing knowledge units. A knowledge unit aggregates multi-dimensional information needed for specific tasks, enabling cross-domain information reuse and contextual knowledge assembly.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Document,
  DocumentRequest,
} from '../models/index';
import {
    DocumentFromJSON,
    DocumentToJSON,
    DocumentRequestFromJSON,
    DocumentRequestToJSON,
} from '../models/index';

export interface DocumentsIdDeleteRequest {
    id: string;
}

export interface DocumentsUploadPostRequest {
    documentRequest: Array<DocumentRequest>;
}

/**
 * 
 */
export class DocumentsManagerResourceApi extends runtime.BaseAPI {

    /**
     * Get All Documents
     */
    async documentsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Document>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/documents`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DocumentFromJSON));
    }

    /**
     * Get All Documents
     */
    async documentsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Document>> {
        const response = await this.documentsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Remove Document
     */
    async documentsIdDeleteRaw(requestParameters: DocumentsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling documentsIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/documents/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove Document
     */
    async documentsIdDelete(requestParameters: DocumentsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.documentsIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Upload Documents
     */
    async documentsUploadPostRaw(requestParameters: DocumentsUploadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['documentRequest'] == null) {
            throw new runtime.RequiredError(
                'documentRequest',
                'Required parameter "documentRequest" was null or undefined when calling documentsUploadPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/documents/upload`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['documentRequest']!.map(DocumentRequestToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Upload Documents
     */
    async documentsUploadPost(requestParameters: DocumentsUploadPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.documentsUploadPostRaw(requestParameters, initOverrides);
    }

}
